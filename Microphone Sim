module MicStart(
    input clock,
    input [1:0] speed1, // Speed input for PWM1
    input [1:0] speed2, // Speed input for PWM2
    input reset,
    output reg PWM1,
    output reg PWM2,
    output reg hbridge1a,
    output reg hbridge2a,
    output reg hbridge1b,
    output reg hbridge2b,
    output reg [2:0] motiondir // Output for motion direction
);

    reg [4:0] counter1; // Counter for PWM1
    reg [4:0] counter2; // Counter for PWM2
    reg [4:0] width1;   // Width for PWM1
    reg [4:0] width2;   // Width for PWM2
    reg temp_PWM1;      // Temporary PWM signal for PWM1
    reg temp_PWM2;      // Temporary PWM signal for PWM2
    
    always @(*) begin
        if (temp_PWM1 == 1 && temp_PWM2 == 0) begin
            motiondir <= 3;
        end else if (temp_PWM2 == 1 && temp_PWM1 == 0) begin
            motiondir <= 4;
        end else if (temp_PWM1 == 1 && temp_PWM2 == 1) begin
            motiondir <= 1;
        end else begin
            motiondir <= 0;
        end
    end
        
    always @(*) begin
        case(motiondir)
            1 : begin // Forward motion
                hbridge1a = 1;
                hbridge1b = 0;
                hbridge2a = 1;
                hbridge2b = 0;
            end
            2 : begin // Reverse motion
                hbridge1a = 0;
                hbridge1b = 1;
                hbridge2a = 0;
                hbridge2b = 1; 
            end
            3 : begin // Left motion
                hbridge1a = 0;
                hbridge1b = 1;
                hbridge2a = 1;
                hbridge2b = 0; 
            end
            4 : begin // Right motion
                hbridge1a = 1;
                hbridge1b = 0;
                hbridge2a = 0;
                hbridge2b = 1; 
            end
            default : begin // Stop motion
                hbridge1a = 0;
                hbridge1b = 0;
                hbridge2a = 0;
                hbridge2b = 0; 
            end
        endcase
    end
    
    initial begin
        counter1 = 0;
        counter2 = 0;
        width1 = 0;
        width2 = 0;
        temp_PWM1 = 0;
        temp_PWM2 = 0;
    end
        
    always@(posedge clock) begin
        if (reset)
            counter1 <= 0;
        else
            counter1 <= counter1 + 1;
        
        if (reset)
            counter2 <= 0;
        else
            counter2 <= counter2 + 1;
                    
        if (counter1 < width1)
            temp_PWM1 <= 1;
        else
            temp_PWM1 <= 0;
        
        if (counter2 < width2)
            temp_PWM2 <= 1;
        else
            temp_PWM2 <= 0;
        
        // Randomly switch PWM1 output
        if (!reset && temp_PWM1 && (counter1 == width1))
            PWM1 <= $random;
        // Randomly switch PWM2 output
        if (!reset && temp_PWM2 && (counter2 == width2))
            PWM2 <= $random;
    end
    
    always @ (*) begin
        case(speed1)
            2'd0 : width1 = 5'd0;
            2'd1 : width1 = 5'd8;  // 25% duty cycle
            2'd2 : width1 = 5'd16; // 50% duty cycle
            2'd3 : width1 = 5'd24; // 75% duty cycle
            default : width1 = 5'd0;
        endcase
        
        case(speed2)
            2'd0 : width2 = 5'd0;
            2'd1 : width2 = 5'd8;  // 25% duty cycle
            2'd2 : width2 = 5'd16; // 50% duty cycle
            2'd3 : width2 = 5'd24; // 75% duty cycle
            default : width2 = 5'd0;
        endcase
    end
endmodule
